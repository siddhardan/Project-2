pipeline {
    agent any
    tools {
        maven "maven"
    }
    environment {
        REPOSITORY_USER_NAME = "siddhardan"
        APP_NAME = "flight"
        IMAGE_NAME = "${REPOSITORY_USER_NAME}/${APP_NAME}:${BUILD_NUMBER}"
        CONTAINER_NAME = "${APP_NAME}"
        PORT = "8000"
        EXPOSED_PORT = "8080"
    }
    stages {
        stage('Checkout from SCM') {
            steps {
                git branch: 'master', credentialsId: 'Project-1-SCM', url: 'https://github.com/siddhardan/Project-2.git'
            }
        }
        stage ('Maven Package Build') {
            steps {
                bat 'mvn clean package'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB_CREDENTIALS', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        bat "docker build -t ${IMAGE_NAME} ."
                        bat "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                        bat "docker push ${IMAGE_NAME}"
                    }
                }    
            }
        }
        /*stage('Deploy Docker Container') {
            steps {
                script {
                    def runningContainers = bat(returnStatus: true, script: "docker ps -a -f label=module=flight")
                    if (runningContainers >=0) {
                        bat "docker rm -f ${CONTAINER_NAME}"
                        bat "docker run -itd -p ${PORT}:${EXPOSED_PORT} --name ${CONTAINER_NAME} ${IMAGE_NAME}"
                    } else {
                        bat "docker run -itd -p ${PORT}:${EXPOSED_PORT} --name ${CONTAINER_NAME} ${IMAGE_NAME}"
                    }
                }
            }
        }
        stage('Provide latest image version to mainfest') {
            steps {
                bat "main.py C:/Users/91960/.jenkins/workspace/Project-2/flight-deployment.yaml --find image_name --replace ${IMAGE_NAME}"
            }
        }*/
        stage('Deploying the application') {
            steps {
                script {
                        def runningPods = bat(script: "kubectl get deploy -l app=flight,env=prod, returnstatus: true")
                        if (runningPods != 0) {
                            bat "kubectl set image deployment/flightdeployment flightcont=${IMAGE_NAME}"
                            bat "kubectl rollout status deployment flightdeployment"
                        } else {
                            bat "kubectl apply -f flight-deployment.yaml"
                        }
                }
            }
        }
    }
    post {
        success {
            script {
                bat "docker rmi -f ${IMAGE_NAME}"
                //bat "docker image prune -af --filter label=module=flight"
            }
        }
        always {
            script {
                def projectName = env.JOB_NAME
                def mailSubject = "${projectName} - BUILD-${BUILD_NUMBER} - ${currentBuild.result}!"
                def mailBody = "${projectName} - BUILD-${BUILD_NUMBER} - ${currentBuild.result}!\n\n Check console output at ${BUILD_URL} to view the results."
                emailext (
                    subject: mailSubject,
                    body: mailBody,
                    to: 'rsiddharth5758@gmail.com',
                    from: 'siddhu7162@gmail.com',
                    replyTo: 'siddhu7162@gmail.com',
                    mimeType: 'text/html',
                    attachLog: true ,
                )
            }
        }
    }
}
